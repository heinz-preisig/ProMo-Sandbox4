1 :: one =  Instantiate ( value , value )
2 :: null =  Instantiate ( value , value )
3 :: to =  Instantiate ( t , value )
4 :: te =  Instantiate ( t , value )
5 :: xo =  Instantiate ( x , value )
6 :: yo =  Instantiate ( y , value )
7 :: pi_A_alpha =  M_A_alpha . x
8 :: pi_A_beta =  M_A_beta . x
9 :: pi_B_gamma =  M_B_gamma . y
10 :: pi_B_delta =  M_B_delta . y
11 :: fx_A_alpha =  F | A | ( K_A_alpha . F | N | pi_A_alpha )
12 :: fx_A_beta =  F | A | ( K_A_beta . F | N | pi_A_beta )
14 :: fy_B_gamma =  F | A | ( K_B_gamma . F | N | pi_B_gamma )
15 :: fy_B_delta =  F | A | ( K_B_delta . F | N | pi_B_delta )
16 :: dx =  fx_A_alpha + fx_A_beta
17 :: dy =  fy_B_gamma + fy_B_delta
20 :: x =  Integral ( dx :: t in [ to , te ] ) + xo
21 :: y =  Integral ( dy :: t in [ to , te ] ) + yo
24 :: pi_A_stack =  Stack ( pi_A_alpha , pi_A_beta )
25 :: pi_B_stack =  Stack ( pi_B_gamma , pi_B_delta )
26 :: pi_stack =  MixedStack ( pi_A_stack , pi_B_stack )
27 :: pi_A_alpha =  Instantiate ( pi_A_alpha , value )
28 :: pi_A_beta =  Instantiate ( pi_A_beta , value )
29 :: pi_B_gamma =  Instantiate ( pi_B_gamma , value )
30 :: pi_B_delta =  Instantiate ( pi_B_delta , value )
31 :: s =  MixedStack ( x , y )
32 :: dx =  Instantiate ( dx , null )
33 :: dy =  Instantiate ( dy , null )
